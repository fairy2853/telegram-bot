from telegram import Update
from telegram.ext import ContextTypes
from functools import partial


async def handle_user_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE, genai, user_states
):
    user_id = update.message.from_user.id
    user_message = update.message.text
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∏–ø—É /start
    if user_message.startswith("/"):
        return

    try:
        model = genai.GenerativeModel("gemini-2.0-flash")

        prompt = (
            "–¢–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É. "
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –≤–≤—ñ—á–ª–∏–≤–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î: {user_message}"
        )
        response = model.generate_content(prompt)
        reply_text = response.text

    except Exception as e:
        reply_text = "–í–∏–±–∞—á, –Ω–∞—Ä–∞–∑—ñ —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è"
        print(e)

    await update.message.reply_text(reply_text)

    state = user_states.get(user_id)

    if state == "waiting_passport":
        await update.message.reply_text(
            "üì∑ –Ø–∫—â–æ —É –≤–∞—Å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ *–ø–∞—Å–ø–æ—Ä—Ç–∞*",
            parse_mode="Markdown",
        )

    elif state == "waiting_car_doc":
        await update.message.reply_text(
            "üì∑ –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ *—Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞*",
            parse_mode="Markdown",
        )
